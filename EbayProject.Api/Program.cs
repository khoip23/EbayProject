using System.Net;
using System.Security.Claims;
using System.Text;
using EbayProject.Api.Helpers;
using EbayProject.Api.Middleware;
using EbayProject.Api.models;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

//DI:
//Service c·ªßa blazor server app
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

//Service jwt
//Th√™m middleware authentication
var privateKey = builder.Configuration["jwt:Serect-Key"];
var Issuer = builder.Configuration["jwt:Issuer"];
var Audience = builder.Configuration["jwt:Audience"];
// Th√™m d·ªãch v·ª• Authentication v√†o ·ª©ng d·ª•ng, s·ª≠ d·ª•ng JWT Bearer l√†m ph∆∞∆°ng th·ª©c x√°c th·ª±c
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{
    // Thi·∫øt l·∫≠p c√°c tham s·ªë x√°c th·ª±c token
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        // Ki·ªÉm tra v√† x√°c nh·∫≠n Issuer (ngu·ªìn ph√°t h√†nh token)
        ValidateIssuer = true,
        ValidIssuer = Issuer, // Bi·∫øn `Issuer` ch·ª©a gi√° tr·ªã c·ªßa Issuer h·ª£p l·ªá
                              // Ki·ªÉm tra v√† x√°c nh·∫≠n Audience (ƒë·ªëi t∆∞·ª£ng nh·∫≠n token)
        ValidateAudience = true,
        ValidAudience = Audience, // Bi·∫øn `Audience` ch·ª©a gi√° tr·ªã c·ªßa Audience h·ª£p l·ªá
                                  // Ki·ªÉm tra v√† x√°c nh·∫≠n kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k√Ω token
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(privateKey)),
        // S·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (`privateKey`) ƒë·ªÉ t·∫°o SymmetricSecurityKey nh·∫±m x√°c th·ª±c ch·ªØ k√Ω c·ªßa token
        // Gi·∫£m ƒë·ªô tr·ªÖ (skew time) c·ªßa token xu·ªëng 0, ƒë·∫£m b·∫£o token h·∫øt h·∫°n ch√≠nh x√°c
        ClockSkew = TimeSpan.Zero,
        // X√°c ƒë·ªãnh claim ch·ª©a vai tr√≤ c·ªßa user (ƒë·ªÉ ph√¢n quy·ªÅn)
        RoleClaimType = ClaimTypes.Role,
        // X√°c ƒë·ªãnh claim ch·ª©a t√™n c·ªßa user
        NameClaimType = ClaimTypes.Name,
        // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n c·ªßa token, kh√¥ng cho ph√©p s·ª≠ d·ª•ng token h·∫øt h·∫°n
        ValidateLifetime = true
    };
});

// Th√™m d·ªãch v·ª• Authorization ƒë·ªÉ h·ªó tr·ª£ ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
builder.Services.AddAuthorization();

//add jwt service (t·ª± vi·∫øt)
builder.Services.AddScoped<JwtAuthService>();

//DI
//service controller
builder.Services.AddControllers();

//SWAGGER
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });

    // üî• Th√™m h·ªó tr·ª£ Authorization header t·∫•t c·∫£ api
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Nh·∫≠p token v√†o √¥ b√™n d∆∞·ªõi theo ƒë·ªãnh d·∫°ng: Bearer {token}"
    });

    // üî• ƒê·ªãnh nghƒ©a y√™u c·∫ßu s·ª≠ d·ª•ng Authorization tr√™n t·ª´ng api
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

//ORM EF
string connectionEbay = builder.Configuration.GetConnectionString("ConnectionStringEbay");

builder.Services.AddDbContext<EbayContext>(options =>
    options.UseSqlServer(connectionEbay));

//DI MIDDLE WARE
builder.Services.AddScoped<BlockIpMiddleware>();
//DI SERVICE CORS
builder.Services.AddCors(option =>
{
    option.AddPolicy("allowLocalHost", builder =>
    {
        builder.WithOrigins("http://localhost:5238")
            .AllowAnyHeader()
            .WithMethods("GET", "POST") //ch·ªâ cho ph√©p get v√† post cho domain kh√°c
            .AllowCredentials();
    });
});


var app = builder.Build();

//MIDDLEWARE

//C·∫•u h√¨nh middleware b·∫Øt l·ªói error 
app.UseExceptionHandler(appBuilder =>
{
    appBuilder.Run(async context =>
    {
        var exceptionFeature = context.Features.Get<IExceptionHandlerFeature>();
        // ƒê·∫∑t response content-type th√†nh JSON
        context.Response.ContentType = "application/json";
        context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
        // Tr·∫£ v·ªÅ JSON ch·ª©a th√¥ng tin l·ªói
        var errorResponse = new { message = exceptionFeature?.Error.Message ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh!" };
        await context.Response.WriteAsJsonAsync(errorResponse);
    });
});
app.UseCors("allowLocalHost");
app.UseSwagger();
app.UseSwaggerUI();
//S·ª¨ D·ª§NG MIDDLE WARE T·ª∞ T·∫†O
app.UseMiddleware<BlockIpMiddleware>();
app.MapControllers();
app.UseHttpsRedirection();

//c·∫•u h√¨nh c√°c t·ªáp tƒ©nh
app.UseStaticFiles();

app.UseAuthentication(); //y√™u c·∫ßu verify token
app.UseAuthorization(); //y√™u c·∫ßu verify roles c·ªßa token

//S·ª≠ d·ª•ng middleware c·ªßa blazor map file host ƒë·ªÉ l√†m file ch·∫°y ƒë·∫ßu ti√™n
app.MapBlazorHub(); 
app.MapFallbackToPage("/_Host");

app.Run();